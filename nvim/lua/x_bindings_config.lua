-- Visual Bindings
require("which-key").register({
    j = { [[v:count?(v:count>5?"m'".v:count:'').'j':'gj']], "down", expr = true },
    k = { [[v:count?(v:count>5?"m'".v:count:'').'k':'gk']], "up", expr = true },
    H = { [[getline('.')[0:col('.')-2]=~#'^\s\+$'?'0':'^']], "Start of Line", expr = true },
    L = { [[getline('.')[col('.'):-1]=~#'^\s\+$'?'$':'g_']], "End of Line", expr = true },

    Q = { "@q", "Play The Temp Macro" },

    ["<"] = { "<gv", "Dedent" },
    [">"] = { ">gv", "Indent" },

    ["J"] = { ":move '>+1<cr>gv=gv", "Move Line Down" },
    ["K"] = { ":move '<-2<cr>gv=gv", "Move Line Up" },
    ["S"] = { ":lua require('tsht').nodes()<CR>", "Move Line Up" },

    ["'"] = { "`", "Jump to mark location" },
    ["`"] = { "'", "Jump to mark line" },

    s = {
        name = "Select Mode",
        s = { "<cmd>lua require'hop'.hint_char1()<cr>", "Hop Char" },
        n = { "v[a", "Left Outside", noremap = false },
        e = { "v[i", "Left Inside", noremap = false },
        i = { "v]i", "Right Inside", noremap = false },
        o = { "v]a", "Right Outside", noremap = false },
        l = { "vi", "Inside", noremap = false },
        u = { "va", "Outside", noremap = false },
    },

    g = {
        name = "Goto",

        g = { "gg", "Buffer Top" },
        j = { "G", "Buffer Bottom" },
        k = { "gg", "Buffer Top" },
        h = { "^", "Line Begining" },
        l = { "$", "Line End" },

        t = { "H", "Window Top" },
        c = { "M", "Window Bottom" },
        b = { "L", "Window Center" },
    },
    v = {
        name = "View",

        t = { "zt", "Cursor On Top" },
        v = { "zz", "Centre Cursor (Vertically)" },
        b = { "zb", "Cursor On Bottom" },

        f = { "zs", "Cursor At First" },
        m = { "<cmd>set sidescrolloff=999<cr><cmd>set sidescrolloff=0<cr>", "Centre Cursor (Horizontally)" },
        e = { "ze", "Cursor At End" },

        h = { "zh", "Scroll Left" },
        l = { "zl", "Scroll Right" },
        j = { "<c-e>", "Scroll Down" },
        k = { "<c-y>", "Scroll Up" },

        o = { "za", "Open Fold" },
        c = { "zc", "Close Fold" },
        s = { "<cmd>normal! HVL<cr>", "Select Viewport" },
    },
    z = {
        name = "Select Mode",

        h = { "<esc><m-v>{", "Left Outside", noremap = false },
        n = { "<esc><m-v>(", "Left Inside", noremap = false },
        e = { "<esc><m-v>)", "Right Inside", noremap = false },
        l = { "<esc><m-v>}", "Right Outside", noremap = false },

        i = { "<esc><m-v>i", "Inside", noremap = false },
        o = { "<esc><m-v>a", "Outside", noremap = false },
    },
    ["g,"] = {
        name = "User Commands",

        [";"] = { "q:", "Command Buffer" },

        j = { "J", "Join" },
        k = { "c<cr><esc>", "Split" },

        r = { "<plug>(SubversiveSubstitute)", "Substitute" },
        -- t = { "<Plug>(EasyAlign)", "Align" },
        c = { "Comment" },
        -- h = { "gv<cmd>lua require'surround'.surround_add()<cr>", "Hug" },

        f = {
            name = "Formatting",

            f = { "<cmd>lua vim.lsp.buf.range_formatting()<CR>", "Format" },
            ["<space>"] = { [[:%s/\v[^^ ]\zs  / /g<cr>]], "Remove Double Spaces" },
            w = { [["!par w" . &textwidth . "<cr>"]], "Wrap to Textwidth", expr = true },

            l = { ":left<cr>", "Left Allign" },
            c = { ":center<cr>", "Centre Allign" },
            r = { ":right<cr>", "Right Allign" },
        },

        s = {
            name = "Change Case",

            p = { "<Plug>CaserVMixedCase", "Pascal Case" },
            c = { "<Plug>CaserVCamelCase", "Camel Case" },
            ["_"] = { "<Plug>CaserVSnakeCase", "Snake Case" },
            u = { "<Plug>CaserVUpperCase", "Upper Case" },
            t = { "<Plug>CaserVTitleCase", "Title Case" },
            s = { "<Plug>CaserVSentenceCase", "Sentance Case" },
            ["<space>"] = { "<Plug>CaserVSpaceCase", "Space Case" },
            ["-"] = { "<Plug>CaserVKebabCase", "Kebab Case" },
            k = { "<Plug>CaserVTitleKebabCase", "Title Case" },
            ["."] = { "<Plug>CaserVDotCase", "Dot Case" },
        },
    },
    ["<leader>"] = {
        ["."] = { "<cmd>Telescope lsp_range_code_actions theme=get_cursor<CR>", "Code Actions" },
        r = {
            name = "Refactor",
            V = { "<plug>(ExtractVarVis)", "Extract Variable" },
            f = { "<cmd>lua require('refactoring').refactor('Extract Function')<cr>", "Extract Function"},
            F = { "<cmd>lua require('refactoring').refactor('Extract Function to File')<cr>", "Extract Function"},
            v = { "<cmd>lua require('refactoring').refactor('Extract Variable')<cr>", "Extract Variable"},
            i = { "<cmd>lua require('refactoring').refactor('Inline Variable')<cr>", "Inline Variable"},
        },
        g = {
            s = { "<cmd>lua require'gitsigns'.stage_hunk({vim.fn.line('.'), vim.fn.line('.')})", "Stage Hunks in Range" },
            r = { "<cmd>lua require'gitsigns'.reset_hunk({vim.fn.line('.'), vim.fn.line('.')})", "Reset Hunks in Range" },
        },
        z = {},
    },
    a = {
        name = "around",
        h = { ":<c-u>Gitsigns selct_hunk<cr>", "Git Hunk" },
        B = { ":<c-u>TSTextobjectSelect @block.outer<cr>", "Block" },
        c = { ":<c-u>TSTextobjectSelect @conditional.outer<cr>", "Conditional" },
        [","] = { ":<c-u>TSTextobjectSelect @parameter.outer<cr>", "Parameter" },
        d = { ":<c-u>TSTextobjectSelect @comment.outer<cr>", "Comment" },
        f = { ":<c-u>TSTextobjectSelect @function.outer<cr>", "Function" },
        F = { ":<c-u>TSTextobjectSelect @call.outer<cr>", "Function" },
        l = { ":<c-u>TSTextobjectSelect @loop.outer<cr>", "Loop" },
        o = { ":<c-u>TSTextobjectSelect @class.outer<cr>", "Class" },
        v = { "<cmd>normal! H^oL$<cr>", "Select Viewport"},
        n = {
            name = "Next",
            s = { ":<c-u>call v:lua.mapped_targets(v:count, ')', 'as')<cr>", "Sentance" },
            w = { ":<c-u>call v:lua.mapped_targets(v:count, 'w', 'aw')<cr>", "Word" },
            W = { ":<c-u>call v:lua.mapped_targets(v:count, 'W', 'aW')<cr>", "WORD" },
            ["$w"] = { ":<c-u>call v:lua.mapped_targets(v:count, '$w', 'a$w')<cr>", "Sub Word" },
            p = { ":<c-u>call v:lua.paragraph_targets(v:count, 1)<cr>", "Paragraph" },
            h = { ":<c-u>call v:lua.git_target(v:count, 'true')<cr>", "Git Hunk" },
            B = { ":<c-u>call v:lua.ts_target(v:count, '@block.outer')<cr>", "Block" },
            c = { ":<c-u>call v:lua.ts_target(v:count, '@conditional.outer')<cr>", "Conditional" },
            [","] = { ":<c-u>call v:lua.ts_target(v:count, '@parameter.outer')<cr>", "Parameter" },
            d = { ":<c-u>call v:lua.ts_target(v:count, '@comment.outer')<cr>", "Comment" },
            f = { ":<c-u>call v:lua.ts_target(v:count, '@function.outer')<cr>", "Function" },
            F = { ":<c-u>call v:lua.ts_target(v:count, '@call.outer')<cr>", "Function" },
            l = { ":<c-u>call v:lua.ts_target(v:count, '@loop.outer')<cr>", "Loop" },
            o = { ":<c-u>call v:lua.ts_target(v:count, '@class.outer')<cr>", "Class" },
        },
        N = {
            name = "Previous",
            s = { ":<c-u>call v:lua.mapped_targets_back(v:count, '(', 'g(', 'as')<cr>", "Sentance" },
            w = { ":<c-u>call v:lua.mapped_targets_back(v:count, 'b', 'ge', 'aw')<cr>", "Word" },
            W = { ":<c-u>call v:lua.mapped_targets_back(v:count, 'B', 'gE', 'aW')<cr>", "WORD" },
            ["$w"] = { ":<c-u>call v:lua.mapped_targets_back(v:count, '$ge', '$b', 'a$w')<cr>", "Sub Word" },
            p = { ":<c-u>call v:lua.paragraph_targets_back(v:count, 1)<cr>", "Paragraph" },
            h = { ":<c-u>call v:lua.git_target(v:count, 'false')<cr>", "Git Hunk" },
            B = { ":<c-u>call v:lua.ts_target_back(v:count, '@block.outer')<cr>", "Block" },
            c = { ":<c-u>call v:lua.ts_target_back(v:count, '@conditional.outer')<cr>", "Conditional" },
            [","] = { ":<c-u>call v:lua.ts_target_back(v:count, '@parameter.outer')<cr>", "Parameter" },
            d = { ":<c-u>call v:lua.ts_target_back(v:count, '@comment.outer')<cr>", "Comment" },
            f = { ":<c-u>call v:lua.ts_target_back(v:count, '@function.outer')<cr>", "Function" },
            F = { ":<c-u>call v:lua.ts_target_back(v:count, '@call.outer')<cr>", "Function" },
            l = { ":<c-u>call v:lua.ts_target_back(v:count, '@loop.outer')<cr>", "Loop" },
            o = { ":<c-u>call v:lua.ts_target_back(v:count, '@class.outer')<cr>", "Class" },
        },
    },
    i = {
        name = "inside",
        h = { ":<c-u>Gitsigns selct_hunk<cr>", "Git Hunk" },
        B = { ":<c-u>TSTextobjectSelect @block.inner<cr>", "Block" },
        c = { ":<c-u>TSTextobjectSelect @conditional.inner<cr>", "Conditional" },
        [","] = { ":<c-u>TSTextobjectSelect @parameter.inner<cr>", "Parameter" },
        d = { ":<c-u>TSTextobjectSelect @comment.outer<cr>", "Comment" },
        f = { ":<c-u>TSTextobjectSelect @function.inner<cr>", "Function" },
        F = { ":<c-u>TSTextobjectSelect @call.inner<cr>", "Function" },
        l = { ":<c-u>TSTextobjectSelect @loop.inner<cr>", "Loop" },
        o = { ":<c-u>TSTextobjectSelect @class.inner<cr>", "Class" },
        v = { "<cmd>normal! H^oL$<cr>", "Select Viewport"},
        n = {
            name = "Next",
            s = { ":<c-u>call v:lua.mapped_targets(v:count, ')', 'is')<cr>", "Sentance" },
            w = { ":<c-u>call v:lua.mapped_targets(v:count, 'w', 'iw')<cr>", "Word" },
            W = { ":<c-u>call v:lua.mapped_targets(v:count, 'W', 'iW')<cr>", "WORD" },
            ["$w"] = { ":<c-u>call v:lua.mapped_targets(v:count, '$w', 'i$w')<cr>", "Sub Word" },
            p = { ":<c-u>call v:lua.paragraph_targets(v:count, 0)<cr>", "Paragraph" },
            h = { ":<c-u>call v:lua.git_target(v:count, 'true')<cr>", "Git Hunk" },
            B = { ":<c-u>call v:lua.ts_target(v:count, '@block.inner')<cr>", "Block" },
            c = { ":<c-u>call v:lua.ts_target(v:count, '@conditional.inner')<cr>", "Conditional" },
            [","] = { ":<c-u>call v:lua.ts_target(v:count, '@parameter.inner')<cr>", "Parameter" },
            d = { ":<c-u>call v:lua.ts_target(v:count, '@comment.outer')<cr>", "Comment" },
            f = { ":<c-u>call v:lua.ts_target(v:count, '@function.inner')<cr>", "Function" },
            F = { ":<c-u>call v:lua.ts_target(v:count, '@call.inner')<cr>", "Function" },
            l = { ":<c-u>call v:lua.ts_target(v:count, '@loop.inner')<cr>", "Loop" },
            o = { ":<c-u>call v:lua.ts_target(v:count, '@class.inner')<cr>", "Class" },
        },
        N = {
            name = "Previous",
            s = { ":<c-u>call v:lua.mapped_targets_back(v:count, '(', 'g(', 'is')<cr>", "Sentance" },
            w = { ":<c-u>call v:lua.mapped_targets_back(v:count, 'b', 'ge', 'iw')<cr>", "Word" },
            W = { ":<c-u>call v:lua.mapped_targets_back(v:count, 'B', 'gE', 'iW')<cr>", "WORD" },
            ["$w"] = { ":<c-u>call v:lua.mapped_targets_back(v:count, '$ge', '$b', 'i$w')<cr>", "Sub Word" },
            p = { ":<c-u>call v:lua.paragraph_targets_back(v:count, 0)<cr>", "Paragraph" },
            h = { ":<c-u>call v:lua.git_target(v:count, 'false')<cr>", "Git Hunk" },
            B = { ":<c-u>call v:lua.ts_target_back(v:count, '@block.inner')<cr>", "Block" },
            c = { ":<c-u>call v:lua.ts_target_back(v:count, '@conditional.inner')<cr>", "Conditional" },
            [","] = { ":<c-u>call v:lua.ts_target_back(v:count, '@parameter.inner')<cr>", "Parameter" },
            d = { ":<c-u>call v:lua.ts_target_back(v:count, '@comment.outer')<cr>", "Comment" },
            f = { ":<c-u>call v:lua.ts_target_back(v:count, '@function.inner')<cr>", "Function" },
            F = { ":<c-u>call v:lua.ts_target_back(v:count, '@call.inner')<cr>", "Function" },
            l = { ":<c-u>call v:lua.ts_target_back(v:count, '@loop.inner')<cr>", "Loop" },
            o = { ":<c-u>call v:lua.ts_target_back(v:count, '@class.inner')<cr>", "Class" },
        },
    },
    ["["] = {
        name = "Backward Leader",
        ["["] = { "v:lua.commandRepeat('[', 'dirJumps')", "Repeat Last", expr = true, noremap = false },
        h = {
            [[&diff ? "[czz<cmd>let g:dirJumps='h'<cr>m`" : "<cmd>lua require'gitsigns'.prev_hunk()<cr>zz<cmd>let g:dirJumps='h'<cr>m`"]],
            "Hunk",
            expr = true,
        },
        Q = {
            "<cmd>let g:dirJumps='Q'<cr>m`<cmd>try <bar> cpfile <bar> catch /E553/ <bar> clast <bar> endtry<cr>zz",
            "Location Entry",
        },
        q = {
            "<cmd>let g:dirJumps='q'<cr>m`<cmd>try <bar> cprevious <bar> catch /E553/ <bar> clast <bar> endtry<cr>zz",
            "QuickFix Entry",
        },
        s = { "<cmd>let g:dirJumps='s'<cr>m`[szz", "Spelling Mistake" },
        ["]"] = { "<cmd>let g:dirJumps=']'<cr>m`[]zz", "Section End", noremap = false },
        ["{"] = { "<cmd>let g:dirJumps='{'<cr>m`[[zz", "Section Start" },
        ["}"] = { "<cmd>let g:dirJumps='{'<cr>m`[[zz", "Section Start" },
        -- ["*"] = { "<cmd>let g:dirJumps='*'<cr>m`[#zz", "Function Call", noremap = false },
        o = { "<cmd>let g:dirJumps='o'<cr>m`<cmd>TSTextobjectGotoPreviousStart @class.outer<cr>zz", "Class" },
        f = { "<cmd>let g:dirJumps='f'<cr>m`<cmd>TSTextobjectGotoPreviousStart @function.outer<cr>zz", "Function" },
        [","] = { "<cmd>let g:dirJumps=','<cr>m`<cmd>TSTextobjectGotoPreviousStart @parameter.inner<cr>zz", "Parameter" },
        c = { "<cmd>let g:dirJumps='c'<cr>m`<cmd>TSTextobjectGotoPreviousStart @conditional.inner<cr>zz", "Conditional" },
        C = { "<cmd>let g:dirJumps='C'<cr>m`<cmd>TSTextobjectGotoPreviousStart @comment.outer<cr>zz", "Comment" },
        l = { "<cmd>let g:dirJumps='l'<cr>m`<cmd>TSTextobjectGotoPreviousStart @loop.outer<cr>zz", "Loop" },
        b = { "<cmd>let g:dirJumps='b'<cr>m`<cmd>TSTextobjectGotoPreviousStart @block.outer<cr>zz", "Block" },
        O = { "<cmd>let g:dirJumps='O'<cr>m`<cmd>TSTextobjectGotoPreviousEnd @class.outer<cr>zz", "Class" },
        F = { "<cmd>let g:dirJumps='F'<cr>m`<cmd>TSTextobjectGotoPreviousEnd @function.outer<cr>zz", "Function" },
        ["<"] = { "<cmd>let g:dirJumps='<'<cr>m`<cmd>TSTextobjectGotoPreviousEnd @parameter.inner<cr>zz", "Parameter" },
        L = { "<cmd>let g:dirJumps='L'<cr>m`<cmd>TSTextobjectGotoPreviousEnd @loop.outer<cr>zz", "Loop" },
        B = { "<cmd>let g:dirJumps='B'<cr>m`<cmd>TSTextobjectGotoPreviousEnd @block.outer<cr>zz", "Block" },
        E = {
            "<cmd>let g:dirJumps='E'<cr>m`<cmd>lua require'trouble'.previous({skip_groups=false, jump=true})<cr>zz",
            "Trouble Item",
        },
        m = { "<cmd>let g:dirJumps='m'<cr>m`[`zz", "File Marks" },
        e = {
            "<cmd>lua vim.lsp.diagnostic.goto_prev({ focusable = false , popup_opts = { border = 'single' }})<CR>zz<cmd>let g:dirJumps='e'<cr>m`",
            "Error",
        },
    },
    ["]"] = {
        name = "Forward Leader",
        ["]"] = { "v:lua.commandRepeat(']', 'dirJumps')", "Repeat Last", expr = true, noremap = false },
        h = {
            [[&diff ? "]czz<cmd>let g:dirJumps='h'<cr>m`" : "<cmd>lua require'gitsigns'.next_hunk()<cr>zz<cmd>let g:dirJumps='h'<cr>m`"]],
            "Hunk",
            expr = true,
        },
        Q = {
            "<cmd>let g:dirJumps='Q'<cr>m`<cmd>try <bar> cnfile <bar> catch /E553/ <bar> cfirst <bar> endtry<cr>zz",
            "Location Entry",
        },
        q = {
            "<cmd>let g:dirJumps='q'<cr>m`<cmd>try <bar> cnext <bar> catch /E553/ <bar> cfirst <bar> endtry<cr>zz",
            "QuickFix Entry",
        },
        s = { "<cmd>let g:dirJumps='s'<cr>m`]szz", "Spelling Mistake" },
        ["["] = { "<cmd>let g:dirJumps='['<cr>m`][zz", "Section End", noremap = false },
        ["}"] = { "<cmd>let g:dirJumps='}'<cr>m`]]zz", "Section Start", noremap = true },
        ["{"] = { "<cmd>let g:dirJumps='}'<cr>m`]]zz", "Section Start", noremap = true },
        -- ["*"] = { "<cmd>let g:dirJumps='*'<cr>m`]#zz", "Function Call", noremap = false },
        d = { "<cmd>let g:dirJumps='D'<cr>m`<cmd>TSTextobjectGotoNextStart @comment.outer<cr>zz", "Comment" },
        o = { "<cmd>let g:dirJumps='o'<cr>m`<cmd>TSTextobjectGotoNextStart @class.outer<cr>zz", "Class" },
        f = { "<cmd>let g:dirJumps='f'<cr>m`<cmd>TSTextobjectGotoNextStart @function.outer<cr>zz", "Function" },
        c = { "<cmd>let g:dirJumps='c'<cr>m`<cmd>TSTextobjectGotoNextStart @conditional.inner<cr>zz", "Conditional" },
        [","] = { "<cmd>let g:dirJumps=','<cr>m`<cmd>TSTextobjectGotoNextStart @parameter.inner<cr>zz", "Parameter" },
        l = { "<cmd>let g:dirJumps='l'<cr>m`<cmd>TSTextobjectGotoNextStart @loop.outer<cr>zz", "Loop" },
        b = { "<cmd>let g:dirJumps='b'<cr>m`<cmd>TSTextobjectGotoNextStart @block.outer<cr>zz", "Block" },
        O = { "<cmd>let g:dirJumps='O'<cr>m`<cmd>TSTextobjectGotoNextEnd @class.outer<cr>zz", "Class (end)" },
        F = { "<cmd>let g:dirJumps='F'<cr>m`<cmd>TSTextobjectGotoNextEnd @function.outer<cr>zz", "Function (end)" },
        C = { "<cmd>let g:dirJumps='C'<cr>m`<cmd>TSTextobjectGotoNextEnd @conditional.inner<cr>zz", "Conditional (end)" },
        ["<"] = { "<cmd>let g:dirJumps='<'<cr>m`<cmd>TSTextobjectGotoNextEnd @parameter.inner<cr>zz", "Parameter (end)" },
        L = { "<cmd>let g:dirJumps='L'<cr>m`<cmd>TSTextobjectGotoNextEnd @loop.outer<cr>zz", "Loop (end)" },
        B = { "<cmd>let g:dirJumps='B'<cr>m`<cmd>TSTextobjectGotoNextEnd @block.outer<cr>zz", "Block (end)" },
        E = {
            "<cmd>let g:dirJumps='E'<cr>m`<cmd>lua require'trouble'.next({skip_groups=false, jump=true})<cr>zz",
            "Trouble Item",
        },
        m = { "<cmd>let g:dirJumps='m'<cr>m`]`zz", "File Marks" },
        e = {
            "<cmd>lua vim.lsp.diagnostic.goto_next({ focusable = false , popup_opts = { border = 'single' }})<CR>zz<cmd>let g:dirJumps='e'<cr>m`",
            "Error",
        },
    },
}, {
    mode = "x",
})
